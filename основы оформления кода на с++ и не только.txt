	имя файла
капс полностью	-	файлы кот содержат суммированный контент из 
разных директорий
	орагнизация файла
все векции отделяются пустой строкой
если больше 2к срок то код следует разделить на отдельные части
	комменты
в самом начале нужно написать основную инфу о проектеЖсписок прогеров, 
дата начала, копирайт и описание
	отступы
4 пробела или табуляция(точного указания нет)
	строки
не более 80 символов т,к, плохо потом обрабатывается
	линии упаковки(расположение кода в файле)
Если выражение не умещается в одной строке, разбейте его в соответствии
 со следующими общими принципами:
• Разрыв после запятой.
• Перерыв перед оператором.

• Совместите новую строку с началом выражения на том же уровне на 
предыдущем
линия.
• Если приведенные выше правила приводят к путанице в коде просто 
сделайте отступ на 8 пробелов. 
	комменты 2
    блочные
дл описания файлов, методов, структур данных и алгоритмов
/*
 *1235456
 */

если в блочном коменте первая строка комента пустая то этот комент не
 должен формамироваться
/*
 *
 *15698423
*/

    одиночный комент
/* 12569541236*/
короткий комент который соотв отступам в коде, если он не помещается на 
строку то лучше юзать блочный комент

    конец строки комент
//15665932
короткий комент который нахо дится на той же\новой строке в коде
удобно выделять блоки кода, но не принято писать его на 2 и более 
соседних строках

	комент 3 документация
/**
 *236952365
 */
code...

для классы, интерфейсы, конструкторы, методы и поля для их описания
!!!!конструкторы, должны иметь 4 пробела для первой строки комментария 
документа и 5 пробелов после нее!!!!
!!!оформление классс\ов, интерфейсов, методов которые не входят в
 документацию лучше с помощью блока/строки и др.

	коменты 4 в коде+оформление самого кода
лучше объявлять 1 переменную в 1 строке т.к. это можно потом будет 
закомментировать и будет понятно
!!!объявление и функции низя писать в одной строке
!!!разные типы также низя в 1 строку
размещать { лучше всего в начале блока + переменные лучше сраху объявлять
а не ждать её первое появление т.к. это может затруднить её поиск в коде
инициализировать переменные лучше там где мы и объявляем, но если нам не
нужны точные вычисления или в принципе вычисления то можно сразу же не 
инициализировать

	оформление классов и объявления интерфейсов
При кодировании классов и интерфейсов необходимо соблюдать 
следующие правила форматирования:
• Отсутствие пробела между именем метода и круглой скобкой «(« 
начало его списка параметров
• Открывающая фигурная скобка «{» появляется в конце той же строки, 
что и оператор объявления.
• Закрывающая скобка «}» начинает отдельную строку с отступом, 
соответствующим ее открытию.
!!оператор, за исключением случаев, когда это пустой оператор, «}» 
должен стоять сразу после «{« 

	операторы ветвлеия и не только
!!Не используйте оператор запятой для группировки нескольких операторов
    составной оператор
заключённый оператор имеет на 1 уровень отступов больше чем внешний
{ должна стоять в конце строки с кот начинается составной оператор а }
должна начинать строку и иметь отступ до начала составного
{} юзают даже для одиночного оператора для читаемости и чтобы избежать
глупых ошибок
    return
не требует () только если он не возвращает значение

    if-else-if
if(){
    code
} else (не обяз if){
    code
}

    функции
for (initialization; condition; update) {
    statements;
}
!!пустая функция for (initialization; condition; update);

При использовании оператора запятой в предложении инициализации или 
обновления оператора for избегайте использования более трех переменных.
если этого не избежать то использовать for

    while
A while statement should have the following form:
while (condition) {
    statements;
}
An empty while statement should have the following form:
while (condition);

A do-while statement should have the following form:
do {
    statements;
} while (condition);

    switch
A switch statement should have the following form:
switch (condition) {
case ABC:
    statements;
    /* falls through */
case DEF:
    statements;
    break;
case XYZ:
    statements;
    break;
default:
    statements;
    break;
}
возможен пропустк brak тогда туда просто добавить комментарий 
/*falls throught*/
каждый witch олжен иметь дефолтный вариант, но break тут избыточен, но 
предотвращает ошибки, если потом добавить другой случай

    try-catch
A try-catch statement should have the following format:
try {
    statements;
} catch (ExceptionClass e) {
    statements;
}

	пустое пространство
    линии
Пустые строки улучшают читаемость
Две пустые строки всегда следует использовать в следующих случаях:
• Между разделами исходного файла
• Между определениями классов и интерфейсов

Одна пустая строка всегда должна использоваться:
• Между методами
• Между локальными переменными в методе и его первым оператором.
• Перед блоком или однострочным комментарий
• Между логическими разделами внутри метода для улучшения читаемости

    блоки
Пробелы следует использовать в следующих случаях:
• Ключевое слово, за которым следует скобка, должно быть разделено 
пробелом. Пример:
       while (правда) {...
       }
не следует использовать пробел между именем метода и его открывающей
скобкой. Это помогает отличать ключевые слова от вызовов методов.
• В списках аргументов после запятых должен быть пробел.

• Все бинарные операторы, кроме. должны быть отделены от своих 
операндов пробелами. пробелы никогда не должны разделять унарные 
операторы, такие как унарный минус, инкремент («++») и
декремент («-») от своих операндов. Пример:
  а + = с + г; а = (а + б) / (с * г);
    в то время как (d ++ = s ++) {n ++;
    }
    печатает ("size is" + foo + "\ n");
• Выражения в операторе for следует разделять пробелами. Пример:
for (выражение1; выражение2; выражение3)

	названия
классы: с большой первая буква и новое слово в названии class ImageSprite;
интерфейсы:как классы interface RasterDelegate;
методы:первое слово с маленькой,остальные с большой
runFast();
переменные:обычно с маленькой, но если слов больше 1 то 2 и далее с большой
для читаемости, должны быть краткими и понятными что обозначают
int             i;
char            *cp;
float           myWidth;
константы:всё с большой буквы, если слов несколько, то разделяем _
int GET_THE_CPU = 1;

	практика
методы и классы не глобальные без причины

избегаем объектов когда можно класс 

Числовые константы (литералы) не должны кодироваться напрямую, 
за исключением -1, 0 и 1, которые могут появляются в цикле for 
как значения счетчика 
 
Избегайте присвоения нескольких переменных одному и тому же значению в 
одном операторе. 

Не используйте оператор присваивания там, где его можно легко спутать 
с оператором равенства. 

Не используйте встроенные назначения для повышения производительности 
во время выполнения. d = (a = b + c) + r;        // AVOID!

рекомендуется использовать круглые скобки в выражениях, включающих 
смешанные операторы, чтобы избежать проблем с приоритетом операторов. 
Даже если приоритет оператора кажется вам ясным, он может быть не 
понятен другим - не следует полагать, что другие программисты знают 
приоритеты так же хорошо, как вы. 

сделайте структуры программы читабельной для других

Если выражение, содержащее бинарный оператор, появляется перед ? В 
тернарном операторе? :, оно должно быть заключено в круглые скобки.
(x >= 0) ? x : -x

используйте XXX в комментарии, чтобы отметить то, что является 
фиктивным, но работает. Используйте FIXME, чтобы пометить что-то 
не работает и это нужно фиксить
